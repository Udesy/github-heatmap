import moment from \"moment\";\nimport React from \"react\"\n\nconst DayName = {\n  0: 'Sun',\n  1: 'Mon',\n  2: 'Tue',\n  3: \"Wed\",\n  4: \"Thu\",\n  5: \"Fri\",\n  6: \"Sat\"\n};\n\nfunction Cell({ value }) {\n  function cellcolor(value) {\n    if (value > 8) return \"bg-purple-800\";\n    if (value > 6) return \"bg-purple-600\";\n    if (value > 4) return \"bg-purple-400\";\n    if (value > 2) return \"bg-purple-200\";\n    else return \"bg-purple-100\";\n  }\n\n  return (\n    <div className={`w-3 h-3 m-[2px] rounded-sm ${cellcolor(value)}`}></div>\n  );\n}\n\nfunction WeekDay({ index }) {\n  return (\n    <div className=\"w-8 h-3 m-[2px] text-center text-xs flex items-center justify-center\">\n      {DayName[index]}\n    </div>\n  );\n}\n\nfunction Timeline({ range, data }) {\n  const days = Math.abs(range[0].diff(range[1], 'days'));\n  const startDate = range[0];\n  const DayFormat = 'DDMMMYYYY';\n\n  // Group days into weeks (columns)\n  const weeks = [];\n  let currentWeek = Array(7).fill(null); // Array for 7 days, Sunday to Saturday\n  for (let i = 0; i < days; i++) {\n    const date = moment(startDate).add(i, 'day');\n    const dayOfWeek = date.day(); // 0 = Sunday, 6 = Saturday\n    const value = data.find(d => moment(date).format(DayFormat) === moment(d.date).format(DayFormat))?.value || 0;\n    currentWeek[dayOfWeek] = { date, value };\n\n    if (dayOfWeek === 6 || i === days - 1) { // End week on Saturday or last day\n      weeks.push([...currentWeek]);\n      currentWeek = Array(7).fill(null);\n    }\n  }\n\n  // Determine month labels for each week\n  const monthLabels = weeks.map((week, index) => {\n    const firstDay = week.find(day => day !== null);\n    return firstDay ? firstDay.date.format('MMM') : null;\n  });\n  let lastMonth = null;\n  const displayMonths = monthLabels.map(month => {\n    if (month && month !== lastMonth) {\n      lastMonth = month;\n      return month;\n    }\n    return null;\n  });\n\n  return (\n    <div className=\"p-4 flex flex-row\">\n      {/* Weekdays stacked vertically on the left */}\n      <div className=\"flex flex-col pt-4.5\">\n        {Array.from({ length: 7 }).map((_, dayIndex) => (\n          <WeekDay key={dayIndex} index={dayIndex} />\n        ))}\n      </div>\n\n      {/* Months and Grid */}\n      <div className=\"flex flex-col\">\n        {/* Month labels */}\n        <div className=\"flex flex-row\">\n          {displayMonths.map((month, index) => (\n            <div key={index} className=\"w-3 m-[2px] text-center text-xs\">\n              {month || ''}\n            </div>\n          ))}\n        </div>\n\n        {/* Grid: rows are days of week, columns are weeks */}\n        <div className=\"flex flex-col\">\n          {Array.from({ length: 7 }).map((_, dayIndex) => (\n            <div key={dayIndex} className=\"flex flex-row\">\n              {weeks.map((week, weekIndex) => {\n                const day = week[dayIndex];\n                return day ? (\n                  <Cell key={weekIndex} value={day.value} />\n                ) : (\n                  <div key={weekIndex} className=\"w-3 h-3 m-[2px]\"></div>\n                );\n              })}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function App() {\n  const startDate = moment().add(-365, \"days\");\n  const dateRange = [startDate, moment()];\n  const data = Array.from(new Array(365)).map((_, index) => ({\n    date: moment(startDate).add(index, \"day\"),\n    value: Math.floor(Math.random() * 10) // Random values for testing\n  }));\n\n  return (\n    <div className=\"container mx-auto\">\n      <Timeline range={dateRange} data={data} />\n    </div>\n  );\n}